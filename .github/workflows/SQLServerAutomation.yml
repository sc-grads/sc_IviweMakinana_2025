name: SQL Server Automation with Pinggy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  automate-sql-server:
    runs-on: ubuntu-latest
    services:
      sql-server:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Iviwe@123
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P Iviwe@123 -Q 'SELECT 1' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update
        sudo apt-get install -y mssql-tools unixodbc-dev
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc

    - name: Wait for SQL Server to be ready
      run: |
        for i in {1..30};
        do
          /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P YourStrong@Passw0rd -Q "SELECT 1" && break
          sleep 2
        done

    - name: Create database and user
      run: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P YourStrong@Passw0rd -Q "
        USE master;
        GO
        
        -- Create database if not exists
        IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'AutoTest')
        BEGIN
            CREATE DATABASE AutoTest;
            PRINT 'Database AutoTest created successfully.';
        END
        ELSE
        BEGIN
            PRINT 'Database AutoTest already exists.';
        END
        GO
        
        -- Create login if not exists
        IF NOT EXISTS (SELECT name FROM sys.server_principals WHERE name = 'Auto_user')
        BEGIN
            CREATE LOGIN Auto_user WITH PASSWORD = 'Iviwe@123';
            PRINT 'Login Auto_user created successfully.';
        END
        ELSE
        BEGIN
            PRINT 'Login Auto_user already exists.';
        END
        GO
        
        -- Create user in AutoTest database
        USE AutoTest;
        GO
        IF NOT EXISTS (SELECT name FROM sys.database_principals WHERE name = 'Auto_user')
        BEGIN
            CREATE USER Auto_user FOR LOGIN Auto_user;
            PRINT 'User Auto_user created successfully.';
        END
        ELSE
        BEGIN
            PRINT 'User Auto_user already exists.';
        END
        GO
        
        -- Grant permissions
        EXEC sp_addrolemember 'db_owner', 'Auto_user';
        PRINT 'Auto_user granted db_owner role.';
        GO"

    - name: Create table and stored procedure
      run: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P YourStrong@Passw0rd -d AutoTest -Q "
        -- Create user table if not exists
        IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'user' AND type = 'U')
        BEGIN
            CREATE TABLE [user] (
                Id INT IDENTITY(1,1) PRIMARY KEY,
                Name NVARCHAR(100) NOT NULL,
                Surname NVARCHAR(100) NOT NULL,
                Email NVARCHAR(255) NOT NULL UNIQUE
            );
            PRINT 'Table user created successfully.';
        END
        ELSE
        BEGIN
            PRINT 'Table user already exists.';
        END
        GO
        
        -- Create stored procedure for inserting users
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'InsertUser')
        BEGIN
            EXEC('
            CREATE PROCEDURE InsertUser
                @Name NVARCHAR(100),
                @Surname NVARCHAR(100),
                @Email NVARCHAR(255)
            AS
            BEGIN
                INSERT INTO [user] (Name, Surname, Email)
                VALUES (@Name, @Surname, @Email);
                
                SELECT SCOPE_IDENTITY() AS UserId;
            END
            ');
            PRINT 'Stored procedure InsertUser created successfully.';
        END
        ELSE
        BEGIN
            PRINT 'Stored procedure InsertUser already exists.';
        END
        GO
        
        -- Insert sample data using the stored procedure
        EXEC InsertUser 'John', 'Doe', 'john.doe@example.com';
        EXEC InsertUser 'Jane', 'Smith', 'jane.smith@example.com';
        PRINT 'Sample data inserted successfully.';
        GO"

    - name: Install Pinggy
      run: |
        curl -SsL https://pinggy.io/install.sh | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Expose SQL Server with Pinggy
      run: |
        pinggy tcp 1433 > pinggy_output.txt &
        sleep 5
        echo "Pinggy URL:"
        grep "Forwarding" pinggy_output.txt || cat pinggy_output.txt
        echo "PINGGY_URL=$(grep -o 'tcp://[^ ]*' pinggy_output.txt | head -n 1)" >> $GITHUB_ENV

    - name: Show connection details
      run: |
        echo "SQL Server exposed at: $PINGGY_URL"
        echo "Connection string:"
        echo "Server=$PINGGY_URL;Database=AutoTest;User Id=Auto_user;Password=Iviwe@123;"
