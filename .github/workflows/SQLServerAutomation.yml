name: SQL Server Automation with Pinggy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  automate-sql-server:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Give enough time for SQL Server to initialize
    
    services:
      sql-server:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Iviwe@123  # Must meet complexity requirements
          MSSQL_PID: Express  # Use Express edition to reduce resource usage
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P Iviwe@123 -Q 'SELECT 1' || exit 1"
          --health-interval 20s  # Longer interval
          --health-timeout 10s   # Longer timeout
          --health-retries 5    # More retries
          --memory="1.5g"       # Limit memory usage
          --cpus="1.0"          # Limit CPU usage

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update
        sudo apt-get install -y mssql-tools unixodbc-dev
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc

    - name: Wait for SQL Server to be ready
      run: |
        echo "Waiting for SQL Server to become healthy..."
        for i in {1..30};
        do
          /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P YourStrong!Passw0rd -Q "SELECT 1" 2>/dev/null && break
          echo "Attempt $i: SQL Server not ready yet..."
          sleep 5
        done
        /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P YourStrong!Passw0rd -Q "SELECT @@VERSION"
        echo "SQL Server is ready!"

    # Rest of your steps remain the same...
