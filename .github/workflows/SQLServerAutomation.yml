name: SQL Server Automation with Pinggy

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  automate-sql:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlcmd unixodbc-dev curl psmisc
        
    - name: Download and install Pinggy
      run: |
        curl -SsL https://pinggy.io/install.sh | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
    - name: Start Pinggy tunnel
      id: pinggy
      run: |
        # Start Pinggy and save process ID
        pinggy tcp 1433 --log > pinggy.log 2>&1 & 
        echo $! > pinggy.pid
        sleep 15
        
        # Extract the public URL from the log file
        PINGGY_URL=$(grep -o 'https://[a-zA-Z0-9.-]*' pinggy.log | head -n 1)
        echo "PINGGY_URL=$PINGGY_URL" >> $GITHUB_ENV
        echo "Pinggy tunnel started at: $PINGGY_URL"
        
    - name: Create database and table
      env:
        SQL_USER: ${{ secrets.SQL_USER }}
        SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
      run: |
        SQL_HOST=$(echo "$PINGGY_URL" | sed -E 's#https://([^:/]+).*#\1#')
        SQL_PORT=1433
        
        # Connection test with retries
        for i in {1..5}; do
          if sqlcmd -S "$SQL_HOST,$SQL_PORT" -U "$SQL_USER" -P "$SQL_PASSWORD" -Q "SELECT 'Connection successful'"; then
            echo "Connected to SQL Server successfully!"
            break
          fi
          echo "Retrying connection ($i/5)..."
          sleep 5
        done
        
        # Database and table creation
        sqlcmd -S "$SQL_HOST,$SQL_PORT" -U "$SQL_USER" -P "$SQL_PASSWORD" -Q "CREATE DATABASE AutoTestDB;"
        
        sqlcmd -S "$SQL_HOST,$SQL_PORT" -U "$SQL_USER" -P "$SQL_PASSWORD" -d AutoTestDB -Q "
        IF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'users')
        CREATE TABLE users (
            Name NVARCHAR(100),
            Surname NVARCHAR(100),
            Email NVARCHAR(255)
        );
        
        IF NOT EXISTS (SELECT * FROM sys.procedures WHERE name = 'InsertUser')
        CREATE PROCEDURE InsertUser
            @Name NVARCHAR(100),
            @Surname NVARCHAR(100),
            @Email NVARCHAR(255)
        AS
        BEGIN
            INSERT INTO users (Name, Surname, Email)
            VALUES (@Name, @Surname, @Email);
        END;"
        
        # Insert sample data
        sqlcmd -S "$SQL_HOST,$SQL_PORT" -U "$SQL_USER" -P "$SQL_PASSWORD" -d AutoTestDB -Q "
        EXEC InsertUser 'John', 'Doe', 'john.doe@example.com';
        EXEC InsertUser 'Jane', 'Smith', 'jane.smith@example.com';"
        
    - name: Verify data
      run: |
        SQL_HOST=$(echo "$PINGGY_URL" | sed -E 's#https://([^:/]+).*#\1#')
        SQL_PORT=1433
        sqlcmd -S "$SQL_HOST,$SQL_PORT" -U "$SQL_USER" -P "$SQL_PASSWORD" -d AutoTestDB -Q "SELECT * FROM users;"
        
    - name: Stop Pinggy tunnel
      if: always()
      run: |
        if [ -f pinggy.pid ]; then
          kill $(cat pinggy.pid) || true
          rm pinggy.pid
        fi
        # Cleanup
        pkill -f "pinggy tcp" || true
        pkill -f "ssh -N" || true
